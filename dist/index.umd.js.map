{"version":3,"file":"index.umd.js","sources":["../src/dom/error.ts","../src/dom/jinjx-element.ts","../src/dom/jinjx-doc.ts","../src/reactive/jinjx-signal.ts","../src/reactive/jinjx-signal-list.ts","../src/dom/jinjx-scope.ts","../src/hooks.ts","../src/misc.ts"],"sourcesContent":["\r\n\r\n\r\nexport class JinjxElementNotFound extends Error {\r\n\tconstructor(selector: string) {\r\n\t\tsuper(`JinjxElementNotFound: Could not find element with selector \"${selector}\"`);\r\n\t\tthis.name = \"JinjxElementNotFoundError\";\r\n\t}\r\n}\r\n\r\n","/**\r\n * @file vexd-element.ts\r\n * @description A lightweight DOM utility class for chainable element manipulation, animations, and reactive signals.\r\n */\r\n\r\nimport { JinjxElementNotFound } from \"./error\";\r\n\r\nclass JinjxElement {\r\n\tprivate el: HTMLElement;\r\n\r\n\t/**\r\n\t * creates an instance of JinjxElement.\r\n\t * @param {HTMLElement | string} element - A DOM element or a CSS selector string.\r\n\t * @throws Will throw an error if the element is not found.\r\n\t */\r\n\tconstructor(element: HTMLElement | string) {\r\n\t\tif (typeof element === \"string\") {\r\n\t\t\tconst found = document.querySelector(element);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new JinjxElementNotFound(element);\r\n\t\t\t}\r\n\t\t\tthis.el = found as HTMLElement;\r\n\t\t} else {\r\n\t\t\tthis.el = element;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new JinjxElement instance wrapping the first descendant matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {JinjxElement} A new JinjxElement instance.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tselect(selector: string): JinjxElement {\r\n\t\tconst found = this.el.querySelector(selector);\r\n\t\tif (!found) {\r\n\t\t\tthrow new JinjxElement(\r\n\t\t\t\t`VexJS: element not found for selector: ${selector}`\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn new JinjxElement(found as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new JinjxElement instance wrapping the first descendant matching the class name.\r\n\t * @param className\r\n\t * @returns\r\n\t */\r\n\tclassed(className: string) {\r\n\t\treturn this.select(`.${className}`);\r\n\t}\r\n\r\n\t/**\r\n\t * gets all descendants matching the class name.\r\n\t * @param className\r\n\t * @returns {JinjxElement[]}\r\n\t */\r\n\tclasses(className: string): JinjxElement[] {\r\n\t\treturn this.all(`.${className}`);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new JinjxElement instance wrapping the first descendant matching the id.\r\n\t * @param elementId\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tid(elementId: string): JinjxElement {\r\n\t\treturn this.select(`#${elementId}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of JinjxElement instances for all descendants matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {JinjxElement[]} Array of JinjxElement instances.\r\n\t */\r\n\tall(selector: string): JinjxElement[] {\r\n\t\tconst nodeList = this.el.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map(\r\n\t\t\t(el) => new JinjxElement(el as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over each descendant matching the selector, invoking the callback.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @param {(JinjxElement: JinjxElement, index: number) => void} callback - Function to call for each element.\r\n\t */\r\n\teach(\r\n\t\tselector: string,\r\n\t\tcallback: (JinjxElement: JinjxElement, index: number) => void\r\n\t): void {\r\n\t\tthis.all(selector).forEach((JinjxElement, index) =>\r\n\t\t\tcallback(JinjxElement, index)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the inner HTML.\r\n\t * @overload\r\n\t * @returns {string} The element's inner HTML.\r\n\t */\r\n\thtml(): string;\r\n\t/**\r\n\t * sets the inner HTML and returns the instance.\r\n\t * @param {string} content - HTML content.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\thtml(content: string): JinjxElement;\r\n\thtml(content?: string): string | JinjxElement {\r\n\t\tif (!content) {\r\n\t\t\treturn this.el.innerHTML;\r\n\t\t}\r\n\t\tthis.el.innerHTML = content;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the text content.\r\n\t * @overload\r\n\t * @returns {string} The element's text content.\r\n\t */\r\n\ttext(): string;\r\n\t/**\r\n\t * sets the text content and returns the instance.\r\n\t * @param {string} content - Text content.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\ttext(content: string): JinjxElement;\r\n\ttext(content?: string): string | JinjxElement {\r\n\t\tif (!content) {\r\n\t\t\treturn this.el.textContent || \"\";\r\n\t\t}\r\n\t\tthis.el.textContent = content;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener and returns a cleanup function to remove it.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {() => void} Function to remove the event listener.\r\n\t */\r\n\tevent(eventName: string, callback: (e: Event) => void): () => void {\r\n\t\tthis.el.addEventListener(eventName, callback);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(eventName, callback);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener that is automatically removed after one invocation.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tonce(eventName: string, callback: (e: Event) => void): JinjxElement {\r\n\t\tthis.el.addEventListener(eventName, callback, { once: true });\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches a custom event.\r\n\t * @param {string} eventName - Custom event name.\r\n\t * @param {{ [key: string]: any }} [details={}] - Event details.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\temit(eventName: string, details: { [key: string]: any } = {}): JinjxElement {\r\n\t\tconst event = new CustomEvent(eventName, { detail: details });\r\n\t\tthis.el.dispatchEvent(event);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element.\r\n\t * @param {string} className - Class name to add.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\taddClass(className: string): JinjxElement {\r\n\t\tthis.el.classList.add(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a class from the element.\r\n\t * @param {string} className - Class name to remove.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tremoveClass(className: string): JinjxElement {\r\n\t\tthis.el.classList.remove(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a class on the element.\r\n\t * @param {string} className - Class name to toggle.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\ttoggleClass(className: string): JinjxElement {\r\n\t\tthis.el.classList.toggle(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific class.\r\n\t * @param {string} className - Class name to check.\r\n\t * @returns {boolean} True if the element has the class.\r\n\t */\r\n\thasClass(className: string): boolean {\r\n\t\treturn this.el.classList.contains(className);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets or sets an attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {string} The attribute's value.\r\n\t */\r\n\tattr(attribute: string): string;\r\n\t/**\r\n\t * Sets an attribute and returns the instance.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @param {string} value - Attribute value.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tattr(attribute: string, value: string): JinjxElement;\r\n\tattr(attribute: string, value?: string): string | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(attribute) || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.setAttribute(attribute, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific attribute.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {boolean} True if the attribute exists.\r\n\t */\r\n\thasAttr(attribute: string): boolean {\r\n\t\treturn this.el.hasAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a data attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @returns {string} The data attribute's value.\r\n\t */\r\n\tdata(attribute: string): string;\r\n\t/**\r\n\t * sets a data attribute and returns the instance.\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @param {string} value - Data attribute value.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tdata(attribute: string, value: string): JinjxElement;\r\n\tdata(attribute: string, value?: string): string | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.dataset[attribute] || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.dataset[attribute] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets an inline style property.\r\n\t * @overload\r\n\t * @param {string} property - CSS property name.\r\n\t * @returns {string} The property's value.\r\n\t */\r\n\tstyle(property: string): string;\r\n\t/**\r\n\t * Sets a style property and returns the instance.\r\n\t * @param {string} property - CSS property name.\r\n\t * @param {string} value - CSS property value.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tstyle(property: string, value: string): JinjxElement;\r\n\tstyle(property: string, value?: string): string | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.style.getPropertyValue(property);\r\n\t\t} else {\r\n\t\t\tthis.el.style.setProperty(property, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a native property.\r\n\t * @overload\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @returns {T[keyof T]} The property's value.\r\n\t */\r\n\tprop<T>(propertyName: keyof T): T[keyof T];\r\n\t/**\r\n\t * sets a native property and returns the instance.\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @param {T[keyof T]} value - The new value.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tprop<T>(propertyName: keyof T, value: T[keyof T]): JinjxElement;\r\n\tprop<T>(\r\n\t\tpropertyName: keyof T,\r\n\t\tvalue?: T[keyof T]\r\n\t): T[keyof T] | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as any)[propertyName];\r\n\t\t} else {\r\n\t\t\t(this.el as any)[propertyName] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * returns the closest ancestor (or self) that matches the selector.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {JinjxElement | null} Closest matching JinjxElement instance or null.\r\n\t */\r\n\tclosest(selector: string): JinjxElement | null {\r\n\t\tconst found = this.el.closest(selector);\r\n\t\treturn found ? new JinjxElement(found as HTMLElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the parent element as a JinjxElement instance.\r\n\t * @returns {JinjxElement | null} The parent JinjxElement instance or null.\r\n\t */\r\n\tparent(): JinjxElement | null {\r\n\t\treturn this.el.parentElement\r\n\t\t\t? new JinjxElement(this.el.parentElement)\r\n\t\t\t: null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns an array of children as JinjxElement instances.\r\n\t * @returns {JinjxElement[]} Array of child JinjxElement instances.\r\n\t */\r\n\tchildren(): JinjxElement[] {\r\n\t\treturn Array.from(this.el.children).map(\r\n\t\t\t(child) => new JinjxElement(child as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the underlying native HTMLElement.\r\n\t * @returns {HTMLElement} The native DOM element.\r\n\t */\r\n\tnative(): HTMLElement {\r\n\t\treturn this.el;\r\n\t}\r\n\r\n\t/**\r\n\t * uses the MutationObserver API to observe changes to a specific attribute.\r\n\t * @param {string} attribute - Attribute name to observe.\r\n\t * @param {(oldValue: string | null, newValue: string | null) => void} callback - Callback when attribute changes.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tobserver(\r\n\t\tattribute: string,\r\n\t\tcallback: (oldValue: string | null, newValue: string | null) => void\r\n\t): () => void {\r\n\t\tconst observer = new MutationObserver((mutations) => {\r\n\t\t\tfor (const mutation of mutations) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmutation.type === \"attributes\" &&\r\n\t\t\t\t\tmutation.attributeName === attribute\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst oldVal = mutation.oldValue;\r\n\t\t\t\t\tconst newVal = this.el.getAttribute(attribute);\r\n\t\t\t\t\tcallback(oldVal, newVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tobserver.observe(this.el, {\r\n\t\t\tattributes: true,\r\n\t\t\tattributeFilter: [attribute],\r\n\t\t\tattributeOldValue: true,\r\n\t\t});\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * uses IntersectionObserver to observe when the element enters or leaves the viewport.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} onScreen - Callback when element is in view.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} offScreen - Callback when element is out of view.\r\n\t * @param {IntersectionObserverInit} [options] - IntersectionObserver options.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tintersector(\r\n\t\tonScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toffScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toptions?: IntersectionObserverInit\r\n\t): () => void {\r\n\t\tconst observer = new IntersectionObserver((entries) => {\r\n\t\t\tentries.forEach((entry) => {\r\n\t\t\t\tentry.isIntersecting ? onScreen(entry) : offScreen(entry);\r\n\t\t\t});\r\n\t\t}, options);\r\n\t\tobserver.observe(this.el);\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element for a specified time (ms) or until a promise resolves.\r\n\t * @param {string} className - Class name to add.\r\n\t * @param {number | Promise<any>} duration - Duration in ms or a promise.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\ttimedClass(className: string, duration: number | Promise<any>): JinjxElement {\r\n\t\tthis.addClass(className);\r\n\t\tif (typeof duration === \"number\") {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.removeClass(className);\r\n\t\t\t}, duration);\r\n\t\t} else if (duration && typeof duration.then === \"function\") {\r\n\t\t\tduration.then(() => this.removeClass(className));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to .appendChild\r\n\t * @param el\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tadd(el: HTMLElement | string | JinjxElement): JinjxElement {\r\n\t\tif (typeof el === \"string\") {\r\n\t\t\tthis.el.insertAdjacentHTML(\"beforeend\", el);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (el instanceof JinjxElement) {\r\n\t\t\tthis.el.appendChild(el.native());\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tthis.el.appendChild(el);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to .innerHTML = \"\"\r\n\t * @returns JinjxElement\r\n\t */\r\n\tempty(): JinjxElement {\r\n\t\tthis.el.innerHTML = \"\";\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * adds the CSS declaration to the element's style.\r\n\t * @param cssDeclaration\r\n\t * @returns\r\n\t */\r\n\tcss(cssDeclaration: Partial<CSSStyleDeclaration>): JinjxElement {\r\n\t\tObject.assign(this.el.style, cssDeclaration);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * defines a mouseenter and mouseleave event.\r\n\t * @param mouseEnter\r\n\t * @param mouseLeave\r\n\t * @returns {() => void} function to remove the event listeners.\r\n\t */\r\n\thover(\r\n\t\tmouseEnter: (e: Event) => void,\r\n\t\tmouseLeave: (e: Event) => void\r\n\t): VoidFunction {\r\n\t\tthis.el.addEventListener(\"mouseenter\", mouseEnter);\r\n\t\tthis.el.addEventListener(\"mouseleave\", mouseLeave);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(\"mouseenter\", mouseEnter);\r\n\t\t\tthis.el.removeEventListener(\"mouseleave\", mouseLeave);\r\n\t\t};\r\n\t}\r\n\r\n\t/*\r\n\t * equivalent to addEventListener(\"click\", callback) or el.click()\r\n\t * @param callback\r\n\t * @returns {() => void} function to remove the event listener.\r\n\t */\r\n\tonClick(callback: (e: Event) => void): VoidFunction {\r\n\t\tthis.el.addEventListener(\"click\", callback);\r\n\t\treturn () => this.el.removeEventListener(\"click\", callback);\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to addEventListener(\"change\", callback)\r\n\t * @param callback\r\n\t * @returns {() => void} function to remove the event listener.\r\n\t */\r\n\tonChange(callback: (e: Event) => void): VoidFunction {\r\n\t\tthis.el.addEventListener(\"change\", callback);\r\n\t\treturn () => this.el.removeEventListener(\"change\", callback);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the value of an input element.\r\n\t * @overload\r\n\t * @returns {string} The value of the input element\r\n\t */\r\n\tvalue(): string;\r\n\t/**\r\n\t * sets the value of an input element and returns the instance.\r\n\t * @param {string} value - New value.\r\n\t * @returns {JinjxElement} The current JinjxElement instance.\r\n\t */\r\n\tvalue(value: string): JinjxElement;\r\n\tvalue(value?: string): string | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as HTMLInputElement).value;\r\n\t\t}\r\n\t\t(this.el as HTMLInputElement).value = value;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * sets the element's disabled property.\r\n\t * @param predicate\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tdisable(predicate?: boolean): JinjxElement {\r\n\t\tthis.prop(\"disabled\", !!predicate);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's aria attribute.\r\n\t * @overload\r\n\t * @param attribute\r\n\t */\r\n\taria(attribute: string): string;\r\n\t/**\r\n\t * sets the element's aria attribute.\r\n\t * (e.g aria(\"label\", \"my label\")) -> aria-label=\"my label\"\r\n\t * @param attribute\r\n\t * @param value\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\taria(attribute: string, value?: string): string | JinjxElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(`aria-${attribute}`) || \"\";\r\n\t\t}\r\n\t\tthis.el.setAttribute(`aria-${attribute}`, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's position and size.\r\n\t * @returns {DOMRect}\r\n\t */\r\n\trect(): DOMRect {\r\n\t\treturn this.el.getBoundingClientRect();\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's offset position.\r\n\t * @returns {top: number, left: number}\r\n\t */\r\n\toffset(): { top: number; left: number } {\r\n\t\tconst { top, left } = this.rect();\r\n\t\treturn { top, left };\r\n\t}\r\n\r\n\t/**\r\n\t * removes the element from the DOM.\r\n\t * @overload\r\n\t * @returns {void}\r\n\t */\r\n\tremove(): void;\r\n\t/**\r\n\t * removes all descendants matching the selector.\r\n\t * @param selector\r\n\t */\r\n\tremove(selector: string): void;\r\n\tremove(selector?: string) {\r\n\t\tif (!selector) {\r\n\t\t\tthis.el.remove();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.all(selector).forEach((el) => el.remove());\r\n\t}\r\n\r\n\t/**\r\n\t * triggers a click event on the element.\r\n\t */\r\n\tclick() {\r\n\t\tthis.el.click();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * sets the element's visibility.\r\n\t * @param {boolean} visible - True to show, false to hide.\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tvisible(visible: boolean): JinjxElement {\r\n\t\tthis.el.style.display = visible ? \"\" : \"none\";\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * sets the element's opacity.\r\n\t * @param {number} opacity - Opacity value between 0 and 1.\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\topacity(opacity: number): JinjxElement {\r\n\t\tthis.el.style.opacity = opacity.toString();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Focuses the element\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tfocus(): JinjxElement {\r\n\t\tthis.el.focus();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * blurs the element\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\tblur(): JinjxElement {\r\n\t\tthis.el.blur();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * sets the tab index of the element.\r\n\t * @param tabdex\r\n\t * @returns {JinjxElement}\r\n\t */\r\n\ttabdex(tabdex: number): JinjxElement {\r\n\t\tthis.el.tabIndex = tabdex;\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport default JinjxElement;\r\n","import { JinjxElementNotFound } from \"./error\";\r\nimport JinjxElement from \"./jinjx-element\";\r\n\r\nclass JinjxDOM {\r\n\tstatic ready(callback: (e: Event) => void) {\r\n\t\tif (document.readyState === \"loading\") {\r\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", callback);\r\n\t\t} else {\r\n\t\t\tcallback(new Event(\"DOMContentLoaded\"));\r\n\t\t}\r\n\t}\r\n\r\n\tstatic id(id: string): JinjxElement {\r\n\t\tconst element = document.getElementById(id);\r\n\t\tif (!element) {\r\n\t\t\tthrow new JinjxElementNotFound(`Element with id \"${id}\" not found.`);\r\n\t\t}\r\n\t\treturn new JinjxElement(element);\r\n\t}\r\n\r\n\tstatic classed(className: string): JinjxElement[] {\r\n\t\tconst elements = document.getElementsByClassName(className);\r\n\t\treturn Array.from(elements).map(\r\n\t\t\t(el) => new JinjxElement(el as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic tags(tagName: string): JinjxElement[] {\r\n\t\tconst elements = document.getElementsByTagName(tagName);\r\n\t\treturn Array.from(elements).map(\r\n\t\t\t(el) => new JinjxElement(el as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\tstatic forms(): JinjxElement[] {\r\n\t\tconst elements = document.forms;\r\n\t\treturn Array.from(elements).map((el) => new JinjxElement(el));\r\n\t}\r\n\r\n\tstatic select(selector: string): JinjxElement {\r\n\t\tconst el = document.querySelector(selector);\r\n\t\tif (!el) {\r\n\t\t\tthrow new JinjxElementNotFound(selector);\r\n\t\t}\r\n\t\treturn new JinjxElement(el as HTMLElement);\r\n\t}\r\n\r\n\tstatic all(selector: string): JinjxElement[] {\r\n\t\tconst elements = document.querySelectorAll(selector);\r\n\t\tif (!elements) {\r\n\t\t\tthrow new JinjxElementNotFound(selector);\r\n\t\t}\r\n\t\treturn Array.from(elements).map(\r\n\t\t\t(el) => new JinjxElement(el as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * creates a new JinjxElement from a tag name and returns it\r\n\t * @param tagName The tag name of the element to create\r\n\t * @returns\r\n\t */\r\n\tstatic create(\r\n\t\ttagName: string,\r\n\t\toptions?: ElementCreationOptions\r\n\t): JinjxElement {\r\n\t\tconst element = document.createElement(tagName, options);\r\n\t\treturn new JinjxElement(element);\r\n\t}\r\n\r\n\t/**\r\n\t * creates a VexdElement from a template literal and returns the\r\n\t * \"top-level\" element or container, if there are multiple only the\r\n\t * first one is returned as to ensure your templates are short as this\r\n\t * shouldn't be used for massive templates\r\n\t */\r\n\tstatic template(\r\n\t\tstrings: TemplateStringsArray,\r\n\t\t...values: any[]\r\n\t): JinjxElement {\r\n\t\tconst rawHTML = strings.reduce((result, string, i) => {\r\n\t\t\tconst value = i < values.length ? String(values[i] ?? \"\") : \"\";\r\n\t\t\treturn result + string + value;\r\n\t\t}, \"\");\r\n\r\n\t\tconst template = document.createElement(\"template\");\r\n\t\ttemplate.innerHTML = rawHTML.trim();\r\n\r\n\t\tconst content = template.content;\r\n\t\treturn new JinjxElement(content.firstChild as HTMLElement);\r\n\t}\r\n\r\n\tstatic emit(eventName: string, options?: CustomEventInit): void {\r\n\t\tconst event = new CustomEvent(eventName, options);\r\n\t\tdocument.dispatchEvent(event);\r\n\t}\r\n}\r\n\r\nexport default JinjxDOM;","import { EffectFn, Watcher, Cleanup, ComputeFn } from \"./jinx-reactive.type\";\r\n/**\r\n * a reactive signal that holds a value and notifies listeners when the value changes\r\n */\r\nclass JinjxSignal<T> {\r\n\tprotected _value: T;\r\n\tprivate listeners: Set<Watcher<T>>;\r\n\r\n\tconstructor(initialValue: T) {\r\n\t\tthis._value = initialValue;\r\n\t\tthis.listeners = new Set();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the current value of the signal\r\n\t */\r\n\tget value(): T {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a new value for the signal and notifies all listeners\r\n\t */\r\n\tset value(newVal: T) {\r\n\t\tif (!this.changed(newVal, this._value)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst oldVal = this._value;\r\n\t\tthis._value = newVal;\r\n\t\tthis.notify(newVal, oldVal);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the signal should update by comparing new and old values\r\n\t * Can be overridden in subclasses for custom equality checks\r\n\t * @param newVal The new value\r\n\t * @param oldVal The current value\r\n\t */\r\n\tprotected changed(newVal: T, oldVal: T): boolean {\r\n\t\treturn newVal !== oldVal;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a listener to the value of the signal\r\n\t * @param watcher A function that will be called when the value changes\r\n\t * @returns A cleanup function that removes the watcher\r\n\t */\r\n\tpublic listens(watcher: Watcher<T>): void {\r\n\t\tthis.listeners.add(watcher);\r\n\t}\r\n\r\n\t/**\r\n\t * removes a listener from the signal\r\n\t * @param watcher The watcher to remove\r\n\t */\r\n\tpublic off(watcher: Watcher<T>): void {\r\n\t\tthis.listeners.delete(watcher);\r\n\t}\r\n\r\n\t/**\r\n\t * notifies all listeners of a value change\r\n\t * @param newVal The new value\r\n\t * @param oldVal The previous value\r\n\t */\r\n\tprotected notify(newVal: T, oldVal: T): void {\r\n\t\tfor (const watcher of this.listeners) {\r\n\t\t\twatcher(newVal, oldVal);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default JinjxSignal;\r\n","\r\n\r\n\r\nclass JinjxSignalList<T> {\r\n\tprivate data: T[];\r\n\tprivate watchers: Set<(newVal: T[], oldVal: T[]) => void>;\r\n  private _frozen: boolean = false;\r\n  private _frozenValue: T[] = [];\r\n\r\n\tconstructor(initial: T[] = []) {\r\n\t\tthis.data = [...initial];\r\n\t\tthis.watchers = new Set();\r\n\t}\r\n\r\n  /**\r\n   * freezes the collection and prevents updates from being dispatched\r\n   * till .begin() is called with the oldValue being dispatched being the\r\n   * value of the collection when it was paused\r\n   */\r\n  public pause() {\r\n    this._frozen = true;\r\n    this._frozenValue = [...this.data];\r\n  }\r\n\r\n  /**\r\n   * unfreezes the collection and dispatches the oldValue\r\n   * as the value of the collection when it was paused\r\n   */\r\n  public begin(): void {\r\n    this._frozen = false;\r\n    this.notify(this.data, this._frozenValue);\r\n  }\r\n\r\n\t/**\r\n\t * a *new copy* of the current array.\r\n\t * Direct modification of the returned array does NOT affect this collection\r\n\t * unless you set it back with .value = ...\r\n\t */\r\n\tpublic get value(): T[] {\r\n\t\treturn [...this.data];\r\n\t}\r\n\r\n\t/**\r\n\t * replaces the entire array with a *new* array, triggering watchers.\r\n\t */\r\n\tpublic set value(newArray: T[]) {\r\n\t\tconst oldVal = this.data;\r\n\t\tthis.data = [...newArray];\r\n\t\tthis.notify(this.data, oldVal);\r\n\t}\r\n\r\n\t/**\r\n\t * Subscribe to changes on this collection.\r\n\t * The callback receives the new array and old array.\r\n\t */\r\n\tpublic listener(fn: (newVal: T[], oldVal: T[]) => void): void {\r\n\t\tthis.watchers.add(fn);\r\n\t}\r\n\r\n\t/**\r\n\t * Unsubscribe a previously added callback.\r\n\t */\r\n\tpublic stop(fn: (newVal: T[], oldVal: T[]) => void): void {\r\n\t\tthis.watchers.delete(fn);\r\n\t}\r\n\r\n\t/**\r\n\t * private method to notify watchers of changes.\r\n\t */\r\n\tprivate notify(newVal: T[], oldVal: T[]): void {\r\n\t\tif(this._frozen) {\r\n      return;\r\n    }\r\n    for (const w of this.watchers) {\r\n\t\t\tw(newVal, oldVal);\r\n\t\t}\r\n\t}\r\n\r\n\t// ----------------\r\n\t// Basic Array Ops\r\n\t// ----------------\r\n\r\n\t/**\r\n\t * Insert items at the end of the array. (like Array.push())\r\n\t */\r\n\tpublic push(...items: T[]): number {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst newLength = this.data.push(...items);\r\n\t\tthis.notify(this.data, oldVal);\r\n\t\treturn newLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove the last item from the array. (like Array.pop())\r\n\t */\r\n\tpublic pop(): T | undefined {\r\n\t\tif (this.data.length === 0) return undefined;\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst popped = this.data.pop();\r\n\t\tthis.notify(this.data, oldVal);\r\n\t\treturn popped;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert items at the beginning of the array. (like Array.unshift())\r\n\t */\r\n\tpublic unshift(...items: T[]): number {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst newLength = this.data.unshift(...items);\r\n\t\tthis.notify(this.data, oldVal);\r\n\t\treturn newLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove the first item from the array. (like Array.shift())\r\n\t */\r\n\tpublic shift(): T | undefined {\r\n\t\tif (this.data.length === 0) {\r\n      return undefined;\r\n    }\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst shifted = this.data.shift();\r\n\t\tthis.notify(this.data, oldVal);\r\n\t\treturn shifted;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes or replaces existing elements and/or adds new elements in place. (like Array.splice())\r\n\t */\r\n\tpublic splice(start: number, deleteCount?: number, ...items: T[]): T[] {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst removed = this.data.splice(start, deleteCount ?? 0, ...items);\r\n\t\tif (removed.length > 0 || items.length > 0) {\r\n\t\t\tthis.notify(this.data, oldVal);\r\n\t\t}\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t// ----------------\r\n\t// Additional Utilities\r\n\t// ----------------\r\n\r\n\t/**\r\n\t * Remove the item at a given index in the array.\r\n\t * Returns the removed item or undefined if index is out of range.\r\n\t */\r\n\tpublic removeByIndex(index: number): T | undefined {\r\n\t\tif (index < 0 || index >= this.data.length) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst [removed] = this.data.splice(index, 1);\r\n\t\tthis.notify(this.data, oldVal);\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the first index where boolCallback(item, index) returns true.\r\n\t * Returns -1 if not found.\r\n\t */\r\n\tpublic indexOf(\r\n\t\tboolCallback: (item: T, index: number, array: T[]) => boolean\r\n\t): number {\r\n\t\treturn this.data.findIndex((item, idx, arr) =>\r\n\t\t\tboolCallback(item, idx, arr)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Filter the collection in-place, removing items that don't satisfy the callback.\r\n\t * Returns an array of removed items (if any).\r\n\t */\r\n\tpublic filterBy(\r\n\t\tcallback: (item: T, index: number, array: T[]) => boolean\r\n\t): T[] {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst newArr = this.data.filter(callback);\r\n\t\tconst removed = oldVal.filter((item) => !newArr.includes(item));\r\n\t\tif (removed.length > 0 || newArr.length !== oldVal.length) {\r\n\t\t\tthis.data = newArr;\r\n\t\t\tthis.notify(this.data, oldVal);\r\n\t\t}\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t/**\r\n\t * Sort the collection in-place using the provided compareFn (like Array.sort()).\r\n\t * Returns the collection itself for chaining.\r\n\t */\r\n\tpublic orderBy(compareFn?: (a: T, b: T) => number): this {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tthis.data.sort(compareFn);\r\n\t\t// Compare references or do a shallow check to see if anything changed:\r\n\t\tif (!arraysShallowEqual(this.data, oldVal)) {\r\n\t\t\tthis.notify(this.data, oldVal);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * remove all items matching callback(item, index) => boolean.\r\n\t * Returns an array of removed items. If none removed, returns [].\r\n\t */\r\n\tpublic remove(\r\n\t\tcallback: (item: T, index: number, array: T[]) => boolean\r\n\t): T[] {\r\n\t\tconst oldVal = this.data.slice();\r\n\t\tconst removedItems: T[] = [];\r\n\r\n\t\tthis.data = this.data.filter((item, index) => {\r\n\t\t\tconst shouldRemove = callback(item, index, oldVal);\r\n\t\t\tif (shouldRemove) {\r\n\t\t\t\tremovedItems.push(item);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (removedItems.length > 0) {\r\n\t\t\tthis.notify(this.data, oldVal);\r\n\t\t}\r\n\t\treturn removedItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper to find an item by callback without removing it.\r\n\t * Returns the first match or undefined if none found.\r\n\t */\r\n\tpublic find(\r\n\t\tcallback: (item: T, index: number, array: T[]) => boolean\r\n\t): T | undefined {\r\n\t\treturn this.data.find(callback);\r\n\t}\r\n\r\n\t\r\n}\r\n\r\n/**\r\n * util function to do a shallow equality check for two arrays.\r\n */\r\nfunction arraysShallowEqual<T>(arr1: T[], arr2: T[]): boolean {\r\n\tif (arr1.length !== arr2.length) return false;\r\n\tfor (let i = 0; i < arr1.length; i++) {\r\n\t\tif (arr1[i] !== arr2[i]) return false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport default JinjxSignalList;","import JinjxElement from \"./jinjx-element\";\r\n\r\nclass JinjxScope {\r\n\tprivate _effectStore: VoidFunction[] = [];\r\n\tconstructor(private host: JinjxElement) {}\r\n\r\n\t/**\r\n\t * delegates an event to a child that matches the selector \r\n\t * \r\n\t * @param eventName the name of the event to listen to\r\n\t * @param selector the selector to match the element \r\n\t * @param eventHandler the function to call when the event is triggered\r\n\t */\r\n\tpublic delegate(\r\n\t\teventName: string,\r\n\t\tselector: string, \r\n\t\teventHandler: (e: Event, el: JinjxElement) => void\r\n\t): void {\r\n\t\tconst computedHandler = (e: Event) => {\r\n\t\t\tconst target = e.target as HTMLElement;\r\n\t\t\tif(target && target.matches(selector)) {\r\n\t\t\t\teventHandler(e, new JinjxElement(target));\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst disposeFn = this.host.event(eventName, computedHandler);\r\n\t\tthis._effectStore.push(disposeFn);\r\n\t}\t\r\n\r\n\t/**\r\n\t * adds an \"effect\" to clean up when the scope is disposed \r\n\t * @param effectFn \r\n\t */\r\n\tpublic effect(effectFn: VoidFunction): void {\r\n\t\tthis._effectStore.push(effectFn);\r\n\t}\r\n\r\n\t/**\r\n\t * disposes the scope and all effects\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tfor (const effect of this._effectStore) {\r\n\t\t\teffect();\r\n\t\t}\r\n\t\tthis._effectStore = [];\r\n\t}\r\n\t\r\n\tpublic enter(callback: (scope: JinjxElement) => void): void {\r\n\t\tcallback(this.host);\r\n\t}\r\n}\r\n\r\nexport default JinjxScope;","import JinjxSignal from \"./reactive/jinjx-signal\";\r\nimport JinjxSignalList from \"./reactive/jinjx-signal-list\";\r\nimport JinjxScope from \"./dom/jinjx-scope\";\r\nimport JinjxElement from \"./dom/jinjx-element\";\r\n\r\n/**\r\n * Creates a JinjxSignal with the given initial value.\r\n * @param initialValue \r\n * @returns \r\n */\r\nexport function signal<T>(initialValue: T): JinjxSignal<T> {\r\n  return new JinjxSignal<T>(initialValue);\r\n}\r\n\r\n/**\r\n * creates a JinjxSignalList with the given initial value\r\n * @param initialValue \r\n * @returns \r\n */\r\nexport function signalList<T>(initialValue: T[]): JinjxSignalList<T> {\r\n  return new JinjxSignalList<T>(initialValue);\r\n}\r\n\r\n/**\r\n * creates a jinjx scope with the given jinjx element selected from\r\n * the DOM to delegate events and specify \"events\" to the element\r\n * @param el \r\n * @returns \r\n */\r\nexport function scope(el: JinjxElement): JinjxScope {\r\n  return new JinjxScope(el);\r\n}\r\n\r\ntype JinjxState<T> = readonly [() => T, (value: T) => void];\r\n\r\n\r\nexport function state<T>(reaction: (oldVal: T, newVal: T) => void, initialValue: T): JinjxState<T> {\r\n  const signal = new JinjxSignal<T>(initialValue);  \r\n  signal.listens(reaction);\r\n  const set = (value: T) => signal.value = value;\r\n  const get = () => signal.value;\r\n  return [get, set] as JinjxState<T>;\r\n}\r\n\r\n","import JinjxElement from \"./dom/jinjx-element\";\r\n\r\ntype AttributeChangedCallback = (newValue: string, oldValue: string) => void;\r\n\r\ntype ReactivePropHooks = readonly [\r\n\t(changeCb: AttributeChangedCallback) => void,\r\n\tVoidFunction\r\n];\r\n\r\n/**\r\n * given an element and a property name, this function will return the following:\r\n * [onChange, off] \r\n * - onChange is a function that takes a callback that will be called when the property changes\r\n *   which is passed the old and new value \r\n * - off is a function that will stop the mutation observer\r\n * @param propName - the name of the property the mutation observer will watch\r\n * @param el - the element to watch\r\n * @returns \r\n */\r\nfunction propState(\r\n\tpropName: string,\r\n\tel: JinjxElement\r\n): ReactivePropHooks {\r\n\tlet mutator: MutationObserver | null = null;\r\n\tlet value: string = el.attr(propName) || \"\";\r\n\r\n\tconst onChange = (changeCb: AttributeChangedCallback): void => {\r\n\t\tif (mutator) {\r\n\t\t\tmutator.disconnect();\r\n\t\t\tmutator = null;\r\n\t\t}\r\n\r\n\t\tmutator = new MutationObserver((mutations: MutationRecord[]) => {\r\n\t\t\tfor (const mutation of mutations) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmutation.type !== \"attributes\" ||\r\n\t\t\t\t\tmutation.attributeName !== propName\r\n\t\t\t\t) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newValue = el.attr(propName) || \"\";\r\n\t\t\t\tconst oldValue = value;\r\n\t\t\t\tvalue = newValue;\r\n\t\t\t\tchangeCb(newValue, oldValue);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tmutator.observe(el.native(), {\r\n\t\t\tattributes: true,\r\n\t\t\tattributeFilter: [propName],\r\n\t\t\tattributeOldValue: true,\r\n\t\t});\r\n\t};\r\n\r\n\tconst off = () => {\r\n\t\tif (mutator) {\r\n\t\t\tmutator.disconnect();\r\n\t\t\tmutator = null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn [onChange, off] as ReactivePropHooks;\r\n}\r\n\r\n/**\r\n * begins an interval and returns a function to stop it \r\n * @param intervalCb \r\n * @param ms \r\n * @returns {VoidFunction}\r\n */\r\nfunction interval(intervalCb: VoidFunction, ms: number): VoidFunction {\r\n\tlet id: number | null = window.setInterval(() => {\r\n\t\tintervalCb();\r\n\t}, ms);\r\n\treturn () => {\r\n\t\tif (!id) return;\r\n\t\twindow.clearInterval(id);\r\n\t\tid = null;\r\n\t};\r\n}\r\n\r\n/**\r\n * begins a timeout and returns a function to clear it\r\n * @param timeoutCb \r\n * @param ms \r\n * @returns {VoidFunction}\r\n */\r\nfunction countdown(timeoutCb: VoidFunction, ms: number): VoidFunction {\r\n\tlet id: number | null = window.setTimeout(() => {\r\n\t\ttimeoutCb();\r\n\t}, ms);\r\n\treturn () => {\r\n\t\tif (!id) return;\r\n\t\twindow.clearTimeout(id);\r\n\t\tid = null;\r\n\t};\r\n}\r\n\r\n\r\nconst resolveTemplateString = (\r\n\tstrings: TemplateStringsArray,\r\n\t...values: any[]\r\n): HTMLTemplateElement => {\r\n  const rawHTML = strings.reduce((result, string, i) => {\r\n\t\tconst value = i < values.length ? String(values[i] ?? \"\") : \"\";\r\n\t\treturn result + string + value;\r\n\t}, \"\");\r\n\r\n\tconst template = document.createElement(\"template\");\r\n\ttemplate.innerHTML = rawHTML.trim();\r\n  return template;\r\n} \r\n\r\n/**\r\n * creates a JinjxElement from a template literal and returns the\r\n * \"top-level\" element or container, if there are multiple only the\r\n * first one is returned as to ensure your templates are short.\r\n * @param strings \r\n * @param values \r\n * @returns \r\n */\r\nfunction snippet(\r\n\tstrings: TemplateStringsArray,\r\n\t...values: any[]\r\n): JinjxElement {\r\n  const template = resolveTemplateString(strings, ...values);\r\n\tconst content = template.content;\r\n\treturn new JinjxElement(content.firstChild as HTMLElement);\r\n}\r\n\r\n\r\nexport { snippet, propState, interval, countdown };"],"names":[],"mappings":"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"}